#!/usr/bin/env bash

#
# This file is part of Tornado: A heterogeneous programming framework:
# https://github.com/beehive-lab/tornadovm
#
# Copyright (c) 2020, APT Group, Department of Computer Science,
# School of Engineering, The University of Manchester. All rights reserved.
# Copyright (c) 2013-2019, APT Group, School of Computer Science,
# The University of Manchester. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Authors: James Clarkson
#

#Include tornado modules and module exports
source tornadoExportList.sh

if [ -z "${TORNADO_SDK}" ]; then
  echo "Please ensure the TORNADO_SDK environment variable is set correctly"
  exit 0
fi

if [ -z "${JAVA_HOME}" ]; then
  echo "Please ensure the JAVA_HOME environment variable is set correctly"
fi

function print_usage() {
  echo "usage:    tornado [options] class [arg0 ... argN]"
  echo ""
  echo "              -h|--help                       Show this message"
  echo "              -d|--debug                      Enable debug output"
  echo ""
  echo "          Debugging options:"
  echo ""
  echo "              --debug                         Print debugging information"
  echo "              --printBytecodes                Print TornadoVM bytecodes"
  echo "              --igv                           Dump GRAAL IR into IGV"
  echo "              --igvLowTier                    Dump OpenCL Low Tier with IGV"
  echo "              --printKernel                   Print autogenerated OpenCL C Kernel"
  echo "              --ea|--enableassertions         Enable Java assertions"
  echo ""
  echo "          TornadoVM settings:"
  echo ""
  echo "              --printFlags                    Print TornadoVM Java flags and exit"
  echo "              --version                       Print TornadoVM version information and exit"
  echo "              --devices                       Print TornadoVM available devices and exit"
  echo ""
  echo "          TornadoVM display all options:"
  echo ""
  echo "              --options                       Print all TornadoVM options and flags, and exit"
  echo ""
  echo "          Maven:"
  echo ""
  echo "              --mavenLocalInstall             Install all maven packages locally"
  echo ""
  exit 0
}

function print_version() {
  cat "${TORNADO_SDK}/etc/tornado.release"
  exit 0
}

function print_all_options() {
  export COLOR_CYAN='\e[0;36m'
  export COLOR_NC='\e[0m' # No Color
  echo "TornadoVM options"
  echo ""
  echo -e "$COLOR_CYAN Debugging Information: $COLOR_NC"
  echo ""
  echo -e "\tPrint all devices available   : --devices "
  echo -e "\tPrint generated kernel        : -Dtornado.print.kernel=True "
  echo -e "\tPrint kernel debug information: -Dtornado.debug=True "
  echo -e "\tEnable full debug information : -Dtornado.fullDebug=True "
  echo -e "\tDump compiled graphs into IGV : -Dgraal.Dump=*:5 -Dgraal.PrintGraph=Network -Dgraal.PrintCFG=false "
  echo ""
  echo -e "$COLOR_CYAN Define on which device the application should run (by default is 0): $COLOR_NC"
  echo ""
  echo -e "\tChange the driver and device to run the application: -D<taskScheduleName>.<taskName>=<driverID>:<deviceID> (e.g., -Ds0.t0.device=1:2)"
  echo -e "\tChange the driver order: -Dtornado.{ptx,opencl}.priority=X (e.g., -Dtornado.opencl.priority=2)"
  echo ""
  echo -e "$COLOR_CYAN Profiler: $COLOR_NC"
  echo ""
  echo -e "\tEnable online profiler        : -Dtornado.profiler=True "
  echo -e "\tSave profiler information   : -Dtornado.profiler=True -Dtornado.profiler.save=True "
  echo -e "\tEnable profiler and print at the end of the execution: -Dtornado.profiler=True -Dtornado.log.profiler=True "
  echo ""
  echo -e "$COLOR_CYAN Device Heap: $COLOR_NC"
  echo ""
  echo -e "\tResize the device heap (1GB by default): -Dtornado.heap.allocation=512MB"
  echo ""
  echo -e "$COLOR_CYAN FPGA: $COLOR_NC"
  echo ""
  echo -e "\tLoad the FPGA configuration file: -Dtornado.fpga.conf.file=<file>"
  echo -e "\tGet a precompiled binary        : -Dtornado.precompiled.binary=<path> "
  echo ""
}

JAVA_CMD=${JAVA_HOME}/bin/java
JAVA_VERSION=$("$JAVA_CMD" -version 2>&1 | awk -F[\"\.] -v OFS=. 'NR==1{print $2,$3}')

TORNADO_FLAGS="-Djava.library.path=${TORNADO_SDK}/lib "
if [ "$JAVA_VERSION" = "1.8" ]; then
  TORNADO_FLAGS="${TORNADO_FLAGS} -Djava.ext.dirs=${TORNADO_SDK}/share/java/tornado"
elif [ "$JAVA_VERSION" = "11.0" ]; then
  TORNADO_FLAGS="${TORNADO_FLAGS} --module-path .:${TORNADO_SDK}/share/java/tornado:."
fi

printflags=0
printdevices=0
enableAssertions=0

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --version)
    print_version
    shift
    ;;
  -d | --debug)
    TORNADO_FLAGS="${TORNADO_FLAGS} -Dtornado.debug=True"
    shift # past argument
    ;;
  --igv)
    TORNADO_FLAGS="${TORNADO_FLAGS} -Dgraal.Dump=*:5 -Dgraal.PrintGraph=Network -Dgraal.PrintCFG=false"
    shift # past argument
    ;;
  --igvLowTier)
    TORNADO_FLAGS="${TORNADO_FLAGS} -Dgraal.Dump=*:1 -Dgraal.PrintGraph=Network -Dgraal.PrintCFG=true -Dtornado.debug.lowtier=True "
    shift
    ;;
  --printKernel)
    TORNADO_FLAGS="${TORNADO_FLAGS} -Dtornado.print.kernel=True "
    shift
    ;;
  --printBytecodes)
    TORNADO_FLAGS="${TORNADO_FLAGS} -Dtornado.print.bytecodes=True "
    shift
    ;;
  --mavenLocalInstall)
    tornadoLocalInstallMaven
    exit 0
    ;;
  --printFlags)
    printflags=1
    shift
    ;;
  --devices)
    printdevices=1
    shift
    ;;
  --options)
    print_all_options
    exit 0
    ;;
  -h | --help)
    print_usage
    shift
    ;;
  -ea | --ea | -enableassertions | --enableassertions)
    enableAssertions=1
    shift
    ;;
  *) # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

PROVIDERS=" \
-Dtornado.load.api.implementation=uk.ac.manchester.tornado.runtime.tasks.TornadoTaskSchedule \
-Dtornado.load.runtime.implementation=uk.ac.manchester.tornado.runtime.TornadoCoreRuntime \
-Dtornado.load.tornado.implementation=uk.ac.manchester.tornado.runtime.common.Tornado \
-Dtornado.load.device.implementation.opencl=uk.ac.manchester.tornado.drivers.opencl.runtime.OCLDeviceFactory \
-Dtornado.load.device.implementation.ptx=uk.ac.manchester.tornado.drivers.ptx.runtime.PTXDeviceFactory \
-Dtornado.load.annotation.implementation=uk.ac.manchester.tornado.annotation.ASMClassVisitor \
-Dtornado.load.annotation.parallel=uk.ac.manchester.tornado.api.annotations.Parallel "

JAVA_FLAGS=""
if [ $enableAssertions -eq 1 ]; then
  # We do not satisfy the Graal compiler assertions because we only support a subset of the Java specification.
  # This allows us have the GraalIR in states which normally would be illegal.
  JAVA_FLAGS="-ea -da:org.graalvm.compiler... "
fi

JAVA_FLAGS="${JAVA_FLAGS}-server -XX:-UseCompressedOops ${TORNADO_FLAGS} ${PROVIDERS} "
if [ "$JAVA_VERSION" = "1.8" ]; then
  JAVA_FLAGS="${JAVA_FLAGS} -XX:-UseJVMCIClassLoader "
elif [ "$JAVA_VERSION" = "11.0" ]; then
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+UseParallelOldGC -XX:-UseBiasedLocking ${MODULE_LIST[*]}"
  read -ra selected_backends < "${TORNADO_SDK}/etc/tornado.backend"
  if [[ ${selected_backends} == *"ptx-backend"* && ${selected_backends} == *"opencl-backend"* ]]; then
    JAVA_FLAGS="${JAVA_FLAGS},${PTX_DRIVER_MODULE},${OPENCL_DRIVER_MODULE} ${OPENCL_AND_PTX_BACKENDS_EXPORTS_LIST[*]}"
  else
    if [[ ${selected_backends} == *"ptx-backend"* ]]; then
      JAVA_FLAGS="${JAVA_FLAGS},${PTX_DRIVER_MODULE} ${PTX_BACKEND_EXPORTS_LIST[*]}"
    fi
    if [[ ${selected_backends} == *"opencl-backend"* ]]; then
      JAVA_FLAGS="${JAVA_FLAGS},${OPENCL_DRIVER_MODULE} ${OPENCL_BACKEND_EXPORTS_LIST[*]}"
    fi
  fi
fi

if [ $printflags -eq 1 ]; then
  echo "$JAVA_CMD $JAVA_FLAGS"
  exit 0
fi

if [ $printdevices -eq 1 ]; then
  tornado uk.ac.manchester.tornado.drivers.TornadoDeviceQuery verbose
  exit 0
fi

# shellcheck disable=SC2068
${JAVA_CMD} ${JAVA_FLAGS} $@
